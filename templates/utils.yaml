---
apiVersion: v1
kind: Pod
metadata:
  name: {{ template "network.name" . }}-bootstrap
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  restartPolicy: Never
  volumes:
  - name: {{ template "network.name" . }}-shared-pvc
    persistentVolumeClaim:
     claimName: {{ template "network.name" . }}-shared-pvc
  - name: dockersocket
    hostPath:
      path: /var/run/docker.sock
  - name: {{ template "network.name" . }}-composer-pvc
    persistentVolumeClaim:
      claimName: {{ template "network.name" . }}-composer-pvc
  - name: sampleconfig
    emptyDir: {}

  initContainers:
  - name: init-service
    image: gcr.io/cloud-builders/git
    command:
    - sh
    - -c
    - |
      git init
      git remote add -f origin https://github.com/IBM-Blockchain/ibm-container-service
      git config core.sparseCheckout true
      echo "/sampleconfig" >> .git/info/sparse-checkout
      while true; do
        git pull origin master
        #git checkout "1.0"
        if [ $? -eq 0 ]; then
          break
        fi
      done
      curl https://raw.githubusercontent.com/cdesiderioarana/ibm-blockchain-network/master/configtx/configtx.yaml > /sampleconfig/configtx.yaml
      curl https://raw.githubusercontent.com/cdesiderioarana/ibm-blockchain-network/master/configtx/profile.json > /shared/profile.json

    volumeMounts:
    - mountPath: /sampleconfig
      name: sampleconfig
    - mountPath: /shared
      name: {{ template "network.name" . }}-shared-pvc
  containers:
  - name: cryptogen
    image: {{ .Values.fabric.toolsImage }}
    imagePullPolicy: {{ .Values.fabric.pullPolicy }}
    command:
    - sh
    - -c
    - -e
    - |
      cryptogen generate --config /sampleconfig/crypto-config.yaml
      cp -r crypto-config /shared/

      for file in $(find /shared/ -iname *_sk); do
        dir=$(dirname $file); mv ${dir}/*_sk ${dir}/key.pem
      done

      find /shared -type d | xargs chmod a+rx
      find /shared -type f | xargs chmod a+r
      touch /shared/status_cryptogen_complete
    volumeMounts:
    - mountPath: /shared
      name: {{ template "network.name" . }}-shared-pvc
    - mountPath: /sampleconfig
      name: sampleconfig

# sampleconfig/configtx.yaml assumes nodes are named e.g. blockchain-orderer
# This is improbable
# With Helm, there's a preference for creating unique deployment names
# By incorporating the Release Name
# To accommodate this, the samplesconfig/configtx.yaml is filtered through sed
# And occurrences of "blockchain-" are replaced with "{{ .Release.Name }}"
# To achieve this, it's necessary to pass {{ .Release.Name }} to the script
# Through the environment

  - name: configtxgen
    image: {{ .Values.fabric.toolsImage }}
    imagePullPolicy: {{ .Values.fabric.pullPolicy }}
    command:
    - sh
    - -c
    - -e
    - |
      while [ ! -f /shared/status_cryptogen_complete ]; do
        echo Waiting for cryptogen
        sleep 5s
      done

      cat /sampleconfig/configtx.yaml | sed --expression="s|blockchain-|${DEPLOYMENT_NAME}-|g" > /shared/configtx.yaml
      
      cd /shared/

      configtxgen -profile ComposerOrdererGenesis -outputBlock orderer.block

      find /shared -type d | xargs chmod a+rx
      find /shared -type f | xargs chmod a+r

      touch /shared/status_configtxgen_complete
      rm -f /shared/status_cryptogen_complete
    env:
     - name: PEERHOST1
       value: {{ template "network.name" . }}-org1peer1
     - name: PEERPORT1
       value: "30110"
     - name: ORDERER_URL
       value: {{ template "network.name" . }}-orderer:31010
     - name: FABRIC_CFG_PATH
       value: /shared
     - name: DEPLOYMENT_NAME
       value: {{ template "network.name" . }}
    # - name: GODEBUG
    #   value: "netdns=go"
    volumeMounts:
    - mountPath: /shared
      name: {{ template "network.name" . }}-shared-pvc
    - mountPath: /sampleconfig
      name: sampleconfig
  - name: bootstrap
    image: {{ .Values.fabric.toolsImage }}
    imagePullPolicy: {{ .Values.fabric.pullPolicy }}
    command:
      - sh
      - -c
      - -e
      - |
        sleep 2s
        echo "Starting bootstrap"
        while [ ! -f /shared/status_configtxgen_complete ]; do
          echo Waiting for configtxgen
          sleep 5s
        done

        echo "Starting bootstrap"
        cp -r /sampleconfig/cas /shared
        echo "Done copying"
        touch /shared/bootstrapped
        rm -f /shared/status_configtxgen_complete
        mkdir -p /home/composer/.composer
        chown 1000 /home/composer/.composer
        touch /shared/status_bootstrapping_complete
        echo "Done with bootstrapping"
    volumeMounts:
    - mountPath: /shared
      name: {{ template "network.name" . }}-shared-pvc
    - mountPath: /home/composer/.composer
      name: {{ template "network.name" . }}-composer-pvc
    - mountPath: /sampleconfig
      name: sampleconfig
